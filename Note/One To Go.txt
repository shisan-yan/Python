															Python笔记<One To Go>

Add By 2017-09-06
change01 : 所有的笔记内容开始以Python3为基础<2017-11-28>

1. 变量
	1.1 局部变量
	1.2 全局变量
	
2. 函数
	2.1 不定长函数
	function(a,b,*args):    		ab后面所有的参数都会以元组的方式存在args中
	function(a,b,c,*args,**kargs) 
		这样在调用的时候，前三个参数分别给a,b,c,带变量名的给kargs，不带变量名的给args
		function(11,22,33,task=88,done=99)
3. 拆包
	def test(a,b,c=33,*args,**kwargs):
		print a
		print b
		print c
		print args
		print kwargs
	A = (44,55,55)
	B = {"name":"laowang","age":"20"}

	test(11,22,33,*A,**B)  这样传入的A跟B前的*表示的就是拆包，表示将A跟B里面的元素拆分赋值；如果要拆分一个元组就用一个*如果拆分一个字典就用两个*

4. 引用
	A = 100
	B = A

	print B   此时打出100

	A = 200

	print B  此时打出的还是100，也就是B = A 这个赋值语句只是将B也指向了A指向的那个变量值的内存地址，相当于变量值的内存地址有了两个指向，当A做其他的指向或者改变的时候并不影响B
	
5. 可变与不可变类型
	可变：列表、字典
	不可变：数字、字符串、元组

6. 递归
	就算阶乘
	def getNum(num=4):
		if num >1:
			return num * getNum(num-1)
		else:
			return num 

7. 匿名函数
	infors = [{'name':'yang','age':'20'},{'name':'jack','age':'30'}]

	infors.sorts(key=lambda x:x['age'])

	匿名函数的调用


8. 文件相关
	r   读取文件，文件不存在报错
	w   写文件，文件不存在则新建
	rb  以二进制的方式读取文件，不存在报错
	wb  以二进制的方式写文件，不存在则新建
	r+  以读写的方式创建文件，文件不存在报错
	w+  以读写的方式创建文件，文件不存在则创建

	f = open('filename','model')

	f.read()   #每次读取一次
	f.write()  #写入文件内容，文件内容中的\n代表换行  f.write('\n haha ')
	f.close()  #关闭操作文件的句柄

	8.1 实现文件的复制 


	8.2 大文件的处理方式
		每次读取的时候读取固定大小
		当读取的长度为0时结束程序
		f = open('file.txt','r')
		content = f.read(1024)
		if len(content) == 0:
			break
	8.3 定位读写（seek）
		f = open('test.py')
		f.seek(2,0)     2表示偏移量，0标示文件的开头，1表示当前位置，2表示文件末尾
		f.readline()    这样就是偏移两个单位后进行去读文件的内容

	8.4 文件的相关操作
		通过借助OS库，可以实现文件的删除、创建、重命名、复制、移动

	8.5 批量出重命名

9. 面向对象
	9.1 类和对象

	类的组成
		类的名称：类名
		类的属性：一组数据
		类的方法：允许对进行操作的方法(行为)

	类的抽象

	类的定义
		class 类名:
			#属性
			#方法

	调用对象的方法
		def Cat:
			#属性
			#方法
			def eat(self):
				print 'eat'

			def drink(self):
				print 'drink'
		#创建一个对象
		obj = Cat()
		tom.eat()
		tom.drink()

	给对象添加属性
		tom = Cat()
		tom.name = 'tomejason'
		tom.age = 2


	创建多个对象

	self
		class Cat:
			def eat(self):
				print 'this is the %s'%(self.name)


		tom =  Cat()
		tom.name = 'tom'
		tom.eat()

		tim =  Cat()
		tim.name = 'tim'
		tim.eat()

		#这样我们就能通过self形参的方式，实现哪个对象调用我们就采用哪个对象的值的结果
	
	self的注意点
		定义函数内的方法的时候，尽量要养成添加一个形参的习惯，否则在多种情况调用的时候会出现混乱

	__init__
		class Cat:

			#初始化对象
			def __init__(self):
				#将需要初始化的数据放到这里

	__str__

	
	隐藏属性
		再给类定义属性的时候，最好写在方法中，让调用者通过调用方法的方式来给属性赋值；这样我们可以校验赋值的合法性，防止传入非法的变量值
	
	私有方法
		在方法的名称前面加上两个下划线为__这样的方法称之为私有方法


	__del__方法
		在对象消除的时候，会自动调用此对象的__del__方法
	class dog:
		def __del__(self):
			print 'dog is died'

		dog1 = dog()
		dog2 = dog1

		del dog1
		del dog2
		print "+++++++++++++++++"


	继承
		class parent:
			def drink(self):
				print 'drink'

		class child(parent):
			def eat(self):
				print 'eat'

		obj = child()
		obj.drink()
		obj.eat()

	重写
		继承了父类之后，重新定义了相同的方法，这就叫做重写

	调用被重写的方法

		class parent:
			def  eat(self):
				print 'eat'

		class child:
			def eat(self):
				print 'child eat'

				#第一种方式
				parent.eat(self)

				#第二种方式
				super().eat()

	私有方法、属性在继承中的表现
		私有方法、属性并不会被继承

	多继承
		class A：

		class B:

		class C(A,B):

	多态
		class dog:
			def print_self(self):
				print '这是dog类！！'

		class xiaotq:
			def print_self(self):
				print '这是哮天犬！！'

		def introduct(temp):
			temp.print_self()   #调用的方法固定，但是调用的对象根据传参的方式加入进来，这就是多态

		dog1 = dog()
		dog2 = xiaotq()
		introduct(dog1)
		introduct(dog2)

	类属性、实例属性
		class  Tool(objecg):
			#属性
			num = 0

			#方法
			def __init__(self,new_name):
				self.name = new_name
				Tool.num += 1
		tool1 = Tool('name1')
		tool2 = Tool('name2')
		tool3 = Tool('name3')

	实例方法、类方法、静态方法
		class Game(object):
			
			#类属性
			num = 0

			#实例方法
			def __init__(self):
				#实例属性
				self.name = 'laowang'

			#类方法
			@classmethod
			def add_num(cls):
				cls.num = 100

		game = Game()
		Game.add_num()
		print(Game.num)

	__new__和__init__方法
		__new__ 

	单例
		class Dog(object):
			__instance = None

			def __new__(cls):
				if cls.__instance == None:
					cls.__instance == 1
					return obj.__instance
				else:
					return cls.__instance


		a = Dog()
		print(id(a))
		b = Dog()
		print(id(b))

10. 异常处理
	try:
		xxxxxx
		xxxxxx
	expect (NameError,IOError):
		xxxxxxxx         捕获指定的异常
	expect	Expection as ret:
		xxxxxxxxxxxxx    捕获所有的异常
		print(ret)       ret为系统报错的具体详情
	else:  
		xxxxxxxx         没有异常才会执行
	finally:
		xxxxxxxx		 不管有没有异常，都会执行此段代码

11. 模块
	import  module      导入一个模块
	moduele.function()  调用模块方法的形式

	from module import function  导入模块的某个模块
	function()          调用模块方法的形式

	from module import * 导入模块下的所有的方法
	function()         调用模块方法的形式

12. __name__ 
	当直接执行本模块文件的时候，__name__的值为__main__
	当通过其他的方法调用模块的时候，模块文件中的__name__的值为模块的名字

13. __all__  
	格式:__all__ = ["function","function2"."class1"]
	在模块中写入此语句，在被其他模块导入的时候，除了list中的方法，其他的方法不会被导入，可以防止导入不需要导入的模块,同样的方法也是一样的规则

14. __init__.py(包)
	一个有__init__.py文件的目录就被称之为包<Python3中可以不加，但是Python2中必须要有，否则无法导入>

	__init__.py中定义的语句在导入包的时候，里面的语句会被先执行
	
	如果在__init__.py中定义__all__变量的值如：__all__ = ['module1','module2']  那么除了list中的模块，其他的模块是不允许被导入的

15. 模块的发布
	setup.py
		from distutils import setup

		setup(name='XXXX',version='1.0',description='xxxx',author='xxxxx',py_modules['ssds.aa','dffgd.bb',xxxx])

		py_modules中列表元素的含义是目录名.模块名 ，比如目录结果为
			suds
			|
			|_____aa.py
			dffgd
			|
			|____bb.py

	构建模块
		python setup.py build

	生成发布压缩包
		python setup.py  sdist

16. 给程序传参
	sys.argv

	python test.py  1234

	此时的sys.argv为一个列表，第一个的元素为脚本名称test.py，后面以空格为分隔符分别为跟接的参数

17. 列表生成式
	实例1：
	a = [i for i in rang(1,18)]
	
	实例2：
	b = [11 for i in rang(1.18)]
	b = [11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]

	案例3：
	c = [i for i in rang(10) if i%2==0]
	c = [0,2,4,6,8]

	案例4：
	d = [i for i in range(3) for j in range(2)]
	d = [0,0,1,1,2,2]

	案例5：
	e = [(i,j) for i in range(3) for j in range(2)]
	e = [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]

18.  集合、列表、元组
	
	列表去重




###############################################Python核心编程################################################################

1. 模块重新导入
	如果在导入模块之后，程序退出之前对模块进行了修改；那么程序后面执行的内容还是原模块中的代码，新修改的内容是没法读取到的,即使在程序中重新导入，只要程序没有重新运行，也是不行的；此时我们就需要借助reload的功能把模块重新导入加载

	from imp import *

	reload(test)

2. 模块循环导入问题
	程序设计上分层，降低耦合
	导入语句放在后面，需要导入时再导入，例如放在函数体内导入

3.  ==与is
	==用来判断值是否相等
	is用来判断指向的是不是同一个对象

4. 深拷贝、浅拷贝
	浅拷贝： 
		a = [1,2,3,4]  b = a  此时 id(a)  等于id(b),并且b的值会随着a的值的变化而变化
		
	深拷贝：
		import copy
		c = copy.deepcopy(a)   
		此时，id(a) 不等于id(c),并且c的值也不会随着a的值的变化而变化

5. copy和deepcopy的区别
	copy后的值会随着变化而变化但是id的值却不一样
	deepcopy值不会随便，并且id也不一样

6. 私有化
	XX：公有变量
	_x：单前置下划线，私有化属性或方法，from somemodule import * 禁止导入，类对象和子类可以访问
	__xx：双前置下划线，避免与子类中的属性名冲突，无法在外部直接访问(名字重整所以访问不到)
	__xx__:双前后下划线，用户名字空间的魔法对象或属性。例如：__init__
	xx_：单后置下划线，用于避免与Python关键词的冲突

7. 属性property
	getattr
		在获取属性值的时候自动首先调用此方法
	setattr
		在设置属性值的时候自动首先调用此方法
	案例：
		class test(object):
			def __init__(self):
				self._num = 100

			def setNum(self,num):
				print 'set the property num'
				self._num = num

			def getNum(self):
				print 'get the property num'

			t = property(getNum,setNum)

			test = test()
			test.t
			test.t = 100

8. property的使用
	class test(object):
			def __init__(self):
				self._num = 100

			@t.setattr
			def t(self,num):
				print 'set the property num'
				self._num = num

			@property		
			def t(self):
				print 'get the property num'

			t = property(getNum,setNum)

			test = test()
			test.t
			test.t = 100
	这样写等同于7中的写法，只不过是通过装饰器来实现

9. 迭代器
	1. 可迭代对象
		一类是集合数据类型。如list、tuple、dict、set、str等
		一类是generator，包括生成器和带yield的generator function
		这些可以直接用于for循环的对象统称为可迭代对象：Iterable

		判断是否可迭代isinstance 
			from  collections import It
			isinstance('abc',Iterable)

	2. 迭代器	
		可以被next()函数调用并不断返回下一个值的对象被称为迭代器:Iterator

		判断对象是否为迭代器
			from  collections import It
			isinstance('abc',Iterator)

	3. iter()函数
		生成器都是Itertor对象，但list、dict、str虽然是Iteraable但是却不是Iterator
		把list、dict、str变成Itertor，可以使用iter()

		a = [1,2,3,4,54,65]
		b = iter(a)

10. 闭包
	def test(num):
		print '1111111111'
		print num

		def t(Lnum):
			print '2222222'
			print num + Lnum
		return t
	ret = test(100)
	ret(200)

	如上面案例中，在函数中再次定义函数，并且还用到了上一层函数的变量；这样的函数就是闭包

11. 装饰器
	def w1(func):
		def inner():
			print '正在验证------------------'

		return innner                                  #这里其实为一个闭包函数

	@w1         #语法糖
	def f1():
		print '------f1--------'

	@w1 
	def f2():
		print '-------f2-------'

	这样我们就通过装饰器的方式实现了每次的验证

12. 使用装饰器装饰无参数的函数
	
13. 使用装饰器对有返回值的函数进行装饰
	
14， 通用装饰器
	
15. 带有参数的解释器

16. 作用域
	命名空间
	LEGB规则
		locals----> enclosimg---->globals---->builtins
		局部的、闭包内的、全局的、内嵌的

17. Python动态添加属性跟方法
	
18. types.MethodType的作用

19. __slots__的作用
	默认情况下，Python给类添加属性是可以没有限制的添加的；如果我们需要限制一个对象只能添加指定的属性，那么我们可以通过__slots__来实现
	
	class Person(object):
		__slots__ = ("name",'age')   这样就只能给Persion添加name跟age这两个属性了，不允许添加其他的属性

	使用__slots__要注意：__slots__定义的属性仅对当前类实例起作用，对继承的子类和是不起作用的

20. 生成器
	创建方式：
		把列表生成式的[]改成()  
			如 a = (x for x in rang(10))
		yeild
			def createNum():
				print '--------start---------'
				a,b = 0,1

				for i in range(5):
					print '-------1-------'
					yield b                 
					print '-------2-------'
					a,b = b,a+b
					print '-------3-------'
				print '-------stop---------'
		上面的例子中，yield的作用：1. 当调用一次next()的时候，到yield的时候程序停止，并且返回yield后面的变量的值；当再次执行next()的时候，程序从yield后面的语句开始执行，到yield停止，如此反复一直到循环结束为止！

21. 使用send

22. yield的实际作用<协程>
	def test1():
		while True:
			print '------1--------'
			yield None

	def test2():
		while True:
			print '-------2---------'
			yield None

	t1 = test1()
	t2 = test2()
	while True:
		t1.__next__()
		t2.__next__()

23. 类装饰器
	
24. 元类
	元类的使用场景：
		拦截类的创建
		修改类
		返回修改之后的类

25. 垃圾回收
	小整数对象池
		Python对小整数的定义是[-5,257)这些整数对象是提前建立好的，不会被垃圾回收.在一个Python的程序中，所有位于这个范围内的整数使用的都是同一个对象
		同样，单个字母也是这样的。
		但是当定义2个相同的字符串时，引用数为0时，触发垃圾回收
	大整数对象池
		每一个大整数，均创建一个新的对象
	itern机制
		比如我们赋值一个变量为一个字符串,A = 'helloword' B = 'helloword';他只占用一个'helloword'所占的内存空间，靠引用计数去维护何时释放

	总结：
		小整数[-5,257)共用对象，常驻内存
		单个字符共用对象，常驻内存
		当个单词，不可修改，默认开始itern机制，共用对象，引用数为0，则销毁

26. GC垃圾回收	

27. GC隔代回收

28. 内建属性
	
29. getattribute

30. 内建函数
	range、map、filter、reduce、sorted、

31. 集合set

32. functools
	
33. 常见模块
	

===========================================================Linux系统编程==========================================================
1. pdb调试
	pdb是基于命令行的调试工具，类似于gnu的gdb	

	运行方式：
		python -m pdb  scriptName

	命令行参数
		l   显示当前的代码
		n   向下执行一行代码
		c   继续执行代码
		b   添加断点
		clear  删除断点
		p   打印一个变量的值
		s   进入到一个函数
		a   打印所有的形参数据
	import pdb
	pdb.run()

2. pep8规则

3. 多任务
	并行

	并发

4. fork创建子进程
	程序
		编写完毕的代码，在没运行的时候。称之为程序
	进程
		正在运行着的代码，就成为进程

  1 #!/usr/bin/env python
  2 
  3 import os
  4 import time
  5 
  6 ret = os.fork()
  7 
  8 if ret == 0:
  9     while True:
 10         print '------------1----------'
 11         time.sleep(1)
 12 else:
 13     while True:
 14         print '-------------2-----------'
 15         time.sleep(1)

5. getpid、getppid
	getpid  获取子进程ID
	getppid 获取父进程ID

6. 全局变量在多个进程中不共享

7. 多次fork
	#!/usr/bin/env python

	import os
	#父进程
	ret = os.fork()

	if ret == 0:
		#子进程
	    print '-----------1---------'
	else:
		#父进程
	    print '------------2----------'

	#父进程、子进程
	ret = os.fork()

	if ret == 0:
		#父进程、子进程
	    print '-------11---------'
	else:
		#父进程的子进程、子进程的子进程
	    print '-------22----------'
	
8. multiprocessing
	
	fork只有在类Unix系统中才会有，在windows平台中不适用，Python提供了一个解决方法multiprocessing，他可以支持跨平台使用

	from multiprocessing import Process
	import time
	
	def test():
		while True:
			print '--------'
			time.sleep(2)

	p = Porcess(target=test)
	p.start()  #让这个进程开始执行test函数里的代码

	while True:
		print '------main-------'
		time.sleep(1)

9. 主进程等待Process子进程先结束
	multiprocessing创建出来的子进程去执行代码。主进程会等待Process子进程先结束

10. Process
	
	常用方法
		p = Process(target=test)

		p.start()                 #开始执行
		p.is_alive()              #判断进程是否还在执行
		p.join([timeout])         #堵塞，等待上面的进程执行完成后再继续往下执行,timeout为等待多久后如果还没执行完也继续往下执行
		p.run()                   #如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法
		p.terminate()             #不管任务是否完成，立即终止

	常用属性
		name:当前进程实例别名，默认为Process-N,N为1开始递增的整数
		pid：当前进程实例的PID值

11. Process子类创建子进程
	#!/usr/bin/env python

	from multiprocessing import Process
	import os
	import time

	class Process_Class(Process):

		def __init__(self,interval):
			Process.__init__(self)
			self.interval = interval

		def run(self):
			print '子进程(%s) 开始执行，父进程为(%s)'%(os.getpid(),os.getppid())
			t_start = time.time()
			time.sleep(slef.interval)
			t_stop = time.time()
			print '(%s)程序执行结束，耗时%0.2f秒'%(os.getpid(),t_stop-t_start)

		if __name = '__main__':
			t_start = time.time()
			print '当前成进程(%s)'%os.getpid()

			p1 = Process_Class(2)

			p1.start()

			p1.join()

			t_stop = time.time()

			print '(%s)执行结束，耗时%0.2f'%(os.getpid(),t_stop-t_start)

12. 进程池
	#!/usr/bin/env python

	from multiprocessing import Pool
	import os,time,random

	def worker(msg):
	    t_start = time.time()
	    print '%s start run,the pid is %d'%(msg,os.getpid())

	    time.sleep(random.random()*2)
	    t_stop = time.time()
	    print 'msg,run end!,use time %0.2f'%(t_stop-t_start)

	po = Pool(3)    #定义一个进程池，最大进程数3

	for i in range(0,10):
		#apply_async(需要调用的目标,(传递给目标的参数元组))
		#每次循环将会用空闲出来的子进程去调用目标
	    po.apply_async(worker,(i,))

	print '-------start--------'
	po.close()		#关闭进程池，关闭后po不再接受新的请求
	po.join()		#等待po将所有子进程执行完毕，必须放在close语句之后  <主进程 创建/添加 任务后，主进程默认不会等待进程池中的任务执行完毕后才结束，而是 当主进程任务做完之后，立刻结束；如果这个地方没有join，会导致进程池中的任务不会被执行>
	
	print '--------end--------'

13. 多种方式的比较
	fork()
		只能在类Unix系统中使用，不跨平台
	Process()
		主进程、子进程同时处理任务
	Pool()
		主进程一般用来等待，真正的任务都在子进程中进行

14. apply堵塞式添加任务
	
	po.apply(worker,(i,))

15. 进程间的互相通信Queue

	Queue.put(item,[block,[timeout]])      #像队列中添加数据
		如果block使用默认值，并且没有设置timeout<单位为秒>，消息队列如果没有可写入的空间，将被堵塞<停在写入状态>，直到消息队列腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没有空间，则抛出“Queue.Full”异常
		
		如果block值为false，只要队列中没有可写入数据，则直接抛出"Queue.Full"的异常



	Queue.get([block[,timeout[]])      #获取队列中的一条消息，然后将其从队列中移除，block默认值为true
		如果block使用默认值，并且没有设置timeout(单位为秒),消息队列如果为空，此时程序进入堵塞<停止在读取状态>，直到从消息队列读取到数据为止；如果设置了timeout，则会等待timeout秒，若还没有读取到任何消息，则抛出"Queue.Empty"异常

		如果block值为false，消息队列如果为空，则会立刻抛出"Queue.Full"的异常

		Queue.get_nowait() : 相当于Queue.get(False)


	Queue.empty()    #如果队列为空，则返回True，否则返回false

	Queue.full()     #如果队列满了，返回True，否则返回False

	Queue.qsize()    #返回当前队列包含的消息数量
	

	#!/usr/bin/env python3

	from multiprocessing import Process,Queue
	import os,time,random

	def write(q):
	    for value in ['A','B','C']:
	        print('put %s to queue.....'%value)
	        q.put(value)
	        time.sleep(random.random())

	def read(q):
	    while True:
	        if not q.empty():
	            value = q.get(True)
	            print('Get %s from queue'%value)
	            time.sleep(random.random())
	        else:
	            break

	if __name__ == '__main__':

	    q = Queue()
	    pw = Process(target=write,args=(q,))
	    pr = Process(target=read,args=(q,))

	    pw.start()
	    pw.join()

	    pr.start()
	    pr.join()

	    print('')
	    print('所有数据都输入并且读取完成')

16. 进程池中的Queue-->Manager().Queue()
	如果使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue(),而不是multipro.Queue()

	#!/usr/bin/env python3

	from multiprocessing import Manager,Pool
	import os,time,random

	def reader(q):
	    print('reader启动(%s),父进程为(%s)'%(os.getpid(),os.getppid()))
	    for i in range(q.qsize()):
	        print('reader从Queue获得到消息：%s'%q.get(True))

	def write(q):
	    print('writer启动(%s),父进程为(%s)'%(os.getpid(),os.getppid()))
	    for i in 'rander':
	        q.put(i)

	if __name__ == '__main__':

	    print("(%s) start"%os.getpid())
	    q=Manager().Queue()

	    po=Pool()

	    po.apply(write,(q,))
	    po.apply(reader,(q,))
	    po.close()
	    po.join()
	    print("(%s) End"%os.getpid())

17. 多进程copy文件
	

